import { AccordionItem } from './AccordionItem';

interface AccordionData {
  title: string;
  content: string;
}

const accordionData: AccordionData[] = [
  {
    title: 'Data Types',
    content:
      '1. String 2. Number 3. Bigint 4. Boolean 5. Undefined 6. Null 7. Symbol 8. Object . Объект (Object): состоит из коллекции пар "ключ-значение" и может содержать любые типы данных в качестве значений. Примитивные типы данных в JavaScript хранятся по значению (value types), тогда как объекты хранятся по ссылке (reference types). Это означает, что при присваивании примитивного значения создается копия значения, а при присваивании объекта создается копия ссылки на объект.',
  },
  {
    title: 'SOLID',
    content:
      'SOLID - аббревиатура пяти основных принципов проектирования в объектно-ориентированном программировании. Single responsibility — принцип едининой ответственности. Модуль должен отвечать за что-то одно. Open-closed — принцип открытости / закрытости. Модуль открыт для расширения и закрыт для изменения.     Liskov substitution — принцип подстановки Барбары Лисков. Цель, чтобы классы-наследники могли бы использоваться вместо родительских классов, от которых они образованы, не нарушая работу программы. Interface segregation — принцип разделения интерфейса. Модули не должны зависеть от интерфейсов, которые не используют. Dependency inversion — принцип инверсии зависимостей. Модули верхних уровней не должны зависеть от модулей нижних уровней',
  },
  {
    title: 'Closure',
    content:
      'Лексическое окружение (lexical environment) и глобальное окружение (global environment) - это концепции, связанные с областью видимости и доступностью переменных в JS. 1. Лексическое окружение: Лексическое окружение связано с областью видимости функции и определяется местом, где функция была определена в исходном коде. Каждая функция имеет своё лексическое окружение, которое содержит ссылку на внешнее окружение (родительское окружение) и локальные переменные функции. 2. Глобальное окружение: Глобальное окружение - окружение верхнего уровня, которое существует в глобальной области видимости. Оно содержит все глобальные переменные и функции, доступные в программе. Глобальное окружение также имеет ссылку на внешнее окружение, которая обычно равна null, так как глобальное окружение не находится внутри другой функции. 3. Создание нового окружения: в JavaScript новое окружение создается при вызове функции. Каждый вызов функции создает новый экземпляр лексического окружения для этого вызова. При создании нового окружения, функция получает доступ к своим локальным переменным и параметрам, а также к переменным из внешнего окружения (родительского окружения) благодаря ссылке на него. 4. Поиск переменных в окружении: При поиске значения переменной JavaScript сначала ищет её в текущем лексическом окружении. Если переменная не найдена, поиск продолжается во внешнем окружении (родительском окружении), и так далее, пока не будет достигнуто глобальное окружение. Если переменная не найдена ни в одном из окружений, будет возвращено значение undefined.',
  },
];

export const Accordion = () => {
  return (
    <div className='accordion'>
      {accordionData.map((item) => (
        <AccordionItem
          key={item.title}
          title={item.title}
          content={item.content}
        />
      ))}
    </div>
  );
};
